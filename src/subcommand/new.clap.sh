# Created by argbash-init v2.10.0
# ARG_OPTIONAL_SINGLE([name])
# ARG_OPTIONAL_SINGLE([codename])
# ARG_OPTIONAL_SINGLE([version])
# ARG_OPTIONAL_SINGLE([image])
# ARG_OPTIONAL_SINGLE([homepage])
# ARG_OPTIONAL_SINGLE([repository])
# ARG_OPTIONAL_SINGLE([bugreport])
# ARG_POSITIONAL_SINGLE([path])
# ARG_DEFAULTS_POS()
# ARG_HELP([<The general help message of my script>])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_path=
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_name=
_arg_codename=
_arg_version=
_arg_image=
_arg_homepage=
_arg_repository=
_arg_bugreport=


print_help()
{
	printf '%s\n' "<The general help message of my script>"
	printf 'Usage: %s [--name <arg>] [--codename <arg>] [--version <arg>] [--image <arg>] [--homepage <arg>] [--repository <arg>] [--bugreport <arg>] [-h|--help] <path>\n' "$0"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--name)
				test $# -lt 2 && println::error "Missing value for the optional argument '$_key'." 1
				_arg_name="$2"
				shift
				;;
			--name=*)
				_arg_name="${_key##--name=}"
				;;
			--codename)
				test $# -lt 2 && println::error "Missing value for the optional argument '$_key'." 1
				_arg_codename="$2"
				shift
				;;
			--codename=*)
				_arg_codename="${_key##--codename=}"
				;;
			--version)
				test $# -lt 2 && println::error "Missing value for the optional argument '$_key'." 1
				_arg_version="$2"
				shift
				;;
			--version=*)
				_arg_version="${_key##--version=}"
				;;
			--image)
				test $# -lt 2 && println::error "Missing value for the optional argument '$_key'." 1
				_arg_image="$2"
				shift
				;;
			--image=*)
				_arg_image="${_key##--image=}"
				;;
			--homepage)
				test $# -lt 2 && println::error "Missing value for the optional argument '$_key'." 1
				_arg_homepage="$2"
				shift
				;;
			--homepage=*)
				_arg_homepage="${_key##--homepage=}"
				;;
			--repository)
				test $# -lt 2 && println::error "Missing value for the optional argument '$_key'." 1
				_arg_repository="$2"
				shift
				;;
			--repository=*)
				_arg_repository="${_key##--repository=}"
				;;
			--bugreport)
				test $# -lt 2 && println::error "Missing value for the optional argument '$_key'." 1
				_arg_bugreport="$2"
				shift
				;;
			--bugreport=*)
				_arg_bugreport="${_key##--bugreport=}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'path'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes println::error "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes println::error "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_path "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || println::error "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
